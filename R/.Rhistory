pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start + change_by,
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
View(mc)
## Remove for final function
rm(list = ls())
d <- read.csv("../data_out/high_resol/01_AVG0702_trsh.csv")
d2 <- d[ ,1:2]
d_ages <- read.csv("../data_out/high_resol/01_AVG0702_trsh_ages.csv")
# Function arguments
data_source_ecolind <- d2
data_source_ages = d_ages
ecolind_name = "Arboreal pollen"
age_scale = "CE years" #or "calBP"
change_by = 10 #100, 1000
n_shift = 2
time_standardisation = NULL
n_rand = 99
add_whiskers = TRUE
y_lim = NULL
y_lim = c(-10, 40)
rm(d, d2, d_ages)
# Load required packages ---------------------------------------------------
require(dplyr)
# Extract values from arguments -------------------------------------------
# baseline_start <- baseline_interval[1]
# baseline_end <- baseline_interval[2]
v <- data_source_ecolind[, 2]
v_ages <- data_source_ages[, 3]
m <- data.frame(v_ages, v)
# Make WUs: 'group samples by time interval' as of 'change_by' --------------
### Define WUs and shifted WUs ----------------------------------------------
shifts <- seq(from = 0, to = change_by - 1, by = change_by/(n_shift + 1))
t_want <- seq(from = min(v_ages) - min(v_ages) %% change_by,
to = max(v_ages) - max(v_ages) %% change_by, by = change_by)
### Loop through the shifted WUs (if n_shift > 0) ---------------------------
df_list <- list()
mc_gather <- list()
for (p in 1:length(shifts)) {
# p = 1
t_want_p <- sort(t_want + shifts[p])
df <- m %>%
dplyr::mutate(time_interval_start =
t_want_p[findInterval(v_ages, t_want_p)])
#### Insert missing time intervals -----------------------------------------
time_intervals_missing <- setdiff(t_want_p, df$time_interval_start)
if (length(time_intervals_missing) > 0) {
df_missing <- data.frame(v_ages = NA, v = NA,
time_interval_start = time_intervals_missing)
df <- df %>%
dplyr::rows_insert(df_missing, by = "time_interval_start") %>%
dplyr::arrange(-time_interval_start)
}
df$time_interval_end <- df$time_interval_start + (change_by - 1)
rm(df_missing, time_intervals_missing)
### Calculate percentage rate of change between consecutive bins ----------
#### Take n_rand times a random sample from each WU -----------------------
## Prepare an empty matrix where data will be stored
mc_summary <- data.frame(unique(df$time_interval_start))
colnames(mc_summary) <- "time_interval_start"
df_list <- list()
## Loop through n_rand:
for (i in 1:n_rand) {
# i = 1
df_i <- df %>% dplyr::group_by(time_interval_start) %>%
dplyr::slice_sample(n = 1) %>%
dplyr::arrange(-time_interval_start)
df_i <- as.data.frame(df_i)
### Calculate annual change between samples from consecutive bins ---------
df_i <- df_i %>%
dplyr::mutate(previous_v = dplyr::lead(v),
previous_t = dplyr::lead(v_ages),
change_v = v - previous_v,
annual_change = change_v / (v_ages - previous_t))
### Standardize annual change by time interval  ---------------------------
## Do not standardize, thus roc_change_by_perc = percentage change by
## difference between sample ages:
if (is.null(time_standardisation)) {
df_i <- df_i %>%
dplyr::mutate(
# time_standardised_change = annual_change * (v_ages - previous_t),
# roc_change_by_perc = (time_standardised_change / previous_v) * 100),
time_standardised_change = NA,
roc_change_by_perc = (change_v / previous_v) * 100)
} else {  ## roc_change_by_perc are re-scaled by time_standardization
df_i <- df_i %>%
dplyr::mutate(
time_standardised_change = annual_change * time_standardisation,
roc_change_by_perc = (time_standardised_change / previous_v) * 100)
}
### Write data in the list ------------------------------------------------
df_list[[i]] <- df_i$roc_change_by_perc
}
### Gather data generated in the loop -------------------------------------
mc_result <- data.frame(simplify2array(df_list))
### Calculate summary stats for each WU -----------------------------------
mc_summary <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
change_mean = mean(dplyr::c_across(tidyselect::starts_with("X")),
na.rm = TRUE))
mc_summary[,2] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
change_median = median(dplyr::c_across(tidyselect::starts_with("X")),
na.rm = TRUE))
mc_summary[,3] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
upper_95th = quantile(dplyr::c_across(tidyselect::starts_with("X")),
probs = 0.95, na.rm = TRUE))
mc_summary[,4] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
lower_25th = quantile(dplyr::c_across(tidyselect::starts_with("X")),
probs = 0.25, na.rm = TRUE))
mc_summary$bin_start <- df_i$time_interval_start
mc_summary$bin_end <- df_i$time_interval_end
mc_summary$previous_bin_start <- mc_summary$bin_start - change_by
mc_gather[[p]] <- mc_summary
}
## Gather data into one data frame
mc <- dplyr::bind_rows(mc_gather) %>% dplyr::arrange(-bin_start) %>%
dplyr::relocate(starts_with("bin"), .before = everything()) %>%
dplyr::relocate(starts_with("previous"), .before = everything())
# Plot results --------------------------------------------------------------
mc <- mc %>% na.omit
pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start + change_by,
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start + change_by/n_shift + 1,
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
View(mc)
change_by/n_shift + 1
change_by/n_shift
change_by/0
## Remove for final function
rm(list = ls())
d <- read.csv("../data_out/high_resol/01_AVG0702_trsh.csv")
d2 <- d[ ,1:2]
d_ages <- read.csv("../data_out/high_resol/01_AVG0702_trsh_ages.csv")
# Function arguments
data_source_ecolind <- d2
data_source_ages = d_ages
ecolind_name = "Arboreal pollen"
age_scale = "CE years" #or "calBP"
change_by = 10 #100, 1000
n_shift = 0
time_standardisation = NULL
n_rand = 99
add_whiskers = TRUE
y_lim = NULL
y_lim = c(-10, 40)
rm(d, d2, d_ages)
# Load required packages ---------------------------------------------------
require(dplyr)
# Extract values from arguments -------------------------------------------
# baseline_start <- baseline_interval[1]
# baseline_end <- baseline_interval[2]
v <- data_source_ecolind[, 2]
v_ages <- data_source_ages[, 3]
m <- data.frame(v_ages, v)
# Make WUs: 'group samples by time interval' as of 'change_by' --------------
### Define WUs and shifted WUs ----------------------------------------------
shifts <- seq(from = 0, to = change_by - 1, by = change_by/(n_shift + 1))
t_want <- seq(from = min(v_ages) - min(v_ages) %% change_by,
to = max(v_ages) - max(v_ages) %% change_by, by = change_by)
### Loop through the shifted WUs (if n_shift > 0) ---------------------------
df_list <- list()
mc_gather <- list()
for (p in 1:length(shifts)) {
# p = 1
t_want_p <- sort(t_want + shifts[p])
df <- m %>%
dplyr::mutate(time_interval_start =
t_want_p[findInterval(v_ages, t_want_p)])
#### Insert missing time intervals -----------------------------------------
time_intervals_missing <- setdiff(t_want_p, df$time_interval_start)
if (length(time_intervals_missing) > 0) {
df_missing <- data.frame(v_ages = NA, v = NA,
time_interval_start = time_intervals_missing)
df <- df %>%
dplyr::rows_insert(df_missing, by = "time_interval_start") %>%
dplyr::arrange(-time_interval_start)
}
df$time_interval_end <- df$time_interval_start + (change_by - 1)
rm(df_missing, time_intervals_missing)
### Calculate percentage rate of change between consecutive bins ----------
#### Take n_rand times a random sample from each WU -----------------------
## Prepare an empty matrix where data will be stored
mc_summary <- data.frame(unique(df$time_interval_start))
colnames(mc_summary) <- "time_interval_start"
df_list <- list()
## Loop through n_rand:
for (i in 1:n_rand) {
# i = 1
df_i <- df %>% dplyr::group_by(time_interval_start) %>%
dplyr::slice_sample(n = 1) %>%
dplyr::arrange(-time_interval_start)
df_i <- as.data.frame(df_i)
### Calculate annual change between samples from consecutive bins ---------
df_i <- df_i %>%
dplyr::mutate(previous_v = dplyr::lead(v),
previous_t = dplyr::lead(v_ages),
change_v = v - previous_v,
annual_change = change_v / (v_ages - previous_t))
### Standardize annual change by time interval  ---------------------------
## Do not standardize, thus roc_change_by_perc = percentage change by
## difference between sample ages:
if (is.null(time_standardisation)) {
df_i <- df_i %>%
dplyr::mutate(
# time_standardised_change = annual_change * (v_ages - previous_t),
# roc_change_by_perc = (time_standardised_change / previous_v) * 100),
time_standardised_change = NA,
roc_change_by_perc = (change_v / previous_v) * 100)
} else {  ## roc_change_by_perc are re-scaled by time_standardization
df_i <- df_i %>%
dplyr::mutate(
time_standardised_change = annual_change * time_standardisation,
roc_change_by_perc = (time_standardised_change / previous_v) * 100)
}
### Write data in the list ------------------------------------------------
df_list[[i]] <- df_i$roc_change_by_perc
}
### Gather data generated in the loop -------------------------------------
mc_result <- data.frame(simplify2array(df_list))
### Calculate summary stats for each WU -----------------------------------
mc_summary <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
change_mean = mean(dplyr::c_across(tidyselect::starts_with("X")),
na.rm = TRUE))
mc_summary[,2] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
change_median = median(dplyr::c_across(tidyselect::starts_with("X")),
na.rm = TRUE))
mc_summary[,3] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
upper_95th = quantile(dplyr::c_across(tidyselect::starts_with("X")),
probs = 0.95, na.rm = TRUE))
mc_summary[,4] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
lower_25th = quantile(dplyr::c_across(tidyselect::starts_with("X")),
probs = 0.25, na.rm = TRUE))
mc_summary$bin_start <- df_i$time_interval_start
mc_summary$bin_end <- df_i$time_interval_end
mc_summary$previous_bin_start <- mc_summary$bin_start - change_by
mc_gather[[p]] <- mc_summary
}
## Gather data into one data frame
mc <- dplyr::bind_rows(mc_gather) %>% dplyr::arrange(-bin_start) %>%
dplyr::relocate(starts_with("bin"), .before = everything()) %>%
dplyr::relocate(starts_with("previous"), .before = everything())
# Plot results --------------------------------------------------------------
mc <- mc %>% na.omit
pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start + change_by/(n_shift + 1),
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
View(mc)
change_by/(n_shift + 1)
pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start,
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
View(mc)
pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start + (change_by/(n_shift + 1)/2),
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
(change_by/(n_shift + 1)/2)
View(mc)
## Remove for final function
rm(list = ls())
d <- read.csv("../data_out/high_resol/01_AVG0702_trsh.csv")
d2 <- d[ ,1:2]
d_ages <- read.csv("../data_out/high_resol/01_AVG0702_trsh_ages.csv")
# Function arguments
data_source_ecolind <- d2
data_source_ages = d_ages
ecolind_name = "Arboreal pollen"
age_scale = "CE years" #or "calBP"
change_by = 10 #100, 1000
n_shift = 1
time_standardisation = NULL
n_rand = 99
add_whiskers = TRUE
y_lim = NULL
y_lim = c(-10, 40)
rm(d, d2, d_ages)
# Load required packages ---------------------------------------------------
require(dplyr)
# Extract values from arguments -------------------------------------------
# baseline_start <- baseline_interval[1]
# baseline_end <- baseline_interval[2]
v <- data_source_ecolind[, 2]
v_ages <- data_source_ages[, 3]
m <- data.frame(v_ages, v)
# Make WUs: 'group samples by time interval' as of 'change_by' --------------
### Define WUs and shifted WUs ----------------------------------------------
shifts <- seq(from = 0, to = change_by - 1, by = change_by/(n_shift + 1))
t_want <- seq(from = min(v_ages) - min(v_ages) %% change_by,
to = max(v_ages) - max(v_ages) %% change_by, by = change_by)
### Loop through the shifted WUs (if n_shift > 0) ---------------------------
df_list <- list()
mc_gather <- list()
for (p in 1:length(shifts)) {
# p = 1
t_want_p <- sort(t_want + shifts[p])
df <- m %>%
dplyr::mutate(time_interval_start =
t_want_p[findInterval(v_ages, t_want_p)])
#### Insert missing time intervals -----------------------------------------
time_intervals_missing <- setdiff(t_want_p, df$time_interval_start)
if (length(time_intervals_missing) > 0) {
df_missing <- data.frame(v_ages = NA, v = NA,
time_interval_start = time_intervals_missing)
df <- df %>%
dplyr::rows_insert(df_missing, by = "time_interval_start") %>%
dplyr::arrange(-time_interval_start)
}
df$time_interval_end <- df$time_interval_start + (change_by - 1)
rm(df_missing, time_intervals_missing)
### Calculate percentage rate of change between consecutive bins ----------
#### Take n_rand times a random sample from each WU -----------------------
## Prepare an empty matrix where data will be stored
mc_summary <- data.frame(unique(df$time_interval_start))
colnames(mc_summary) <- "time_interval_start"
df_list <- list()
## Loop through n_rand:
for (i in 1:n_rand) {
# i = 1
df_i <- df %>% dplyr::group_by(time_interval_start) %>%
dplyr::slice_sample(n = 1) %>%
dplyr::arrange(-time_interval_start)
df_i <- as.data.frame(df_i)
### Calculate annual change between samples from consecutive bins ---------
df_i <- df_i %>%
dplyr::mutate(previous_v = dplyr::lead(v),
previous_t = dplyr::lead(v_ages),
change_v = v - previous_v,
annual_change = change_v / (v_ages - previous_t))
### Standardize annual change by time interval  ---------------------------
## Do not standardize, thus roc_change_by_perc = percentage change by
## difference between sample ages:
if (is.null(time_standardisation)) {
df_i <- df_i %>%
dplyr::mutate(
# time_standardised_change = annual_change * (v_ages - previous_t),
# roc_change_by_perc = (time_standardised_change / previous_v) * 100),
time_standardised_change = NA,
roc_change_by_perc = (change_v / previous_v) * 100)
} else {  ## roc_change_by_perc are re-scaled by time_standardization
df_i <- df_i %>%
dplyr::mutate(
time_standardised_change = annual_change * time_standardisation,
roc_change_by_perc = (time_standardised_change / previous_v) * 100)
}
### Write data in the list ------------------------------------------------
df_list[[i]] <- df_i$roc_change_by_perc
}
### Gather data generated in the loop -------------------------------------
mc_result <- data.frame(simplify2array(df_list))
### Calculate summary stats for each WU -----------------------------------
mc_summary <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
change_mean = mean(dplyr::c_across(tidyselect::starts_with("X")),
na.rm = TRUE))
mc_summary[,2] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
change_median = median(dplyr::c_across(tidyselect::starts_with("X")),
na.rm = TRUE))
mc_summary[,3] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
upper_95th = quantile(dplyr::c_across(tidyselect::starts_with("X")),
probs = 0.95, na.rm = TRUE))
mc_summary[,4] <- mc_result %>%
dplyr::rowwise() %>%
dplyr::summarise(
lower_25th = quantile(dplyr::c_across(tidyselect::starts_with("X")),
probs = 0.25, na.rm = TRUE))
mc_summary$bin_start <- df_i$time_interval_start
mc_summary$bin_end <- df_i$time_interval_end
mc_summary$previous_bin_start <- mc_summary$bin_start - change_by
mc_gather[[p]] <- mc_summary
}
## Gather data into one data frame
mc <- dplyr::bind_rows(mc_gather) %>% dplyr::arrange(-bin_start) %>%
dplyr::relocate(starts_with("bin"), .before = everything()) %>%
dplyr::relocate(starts_with("previous"), .before = everything())
# Plot results --------------------------------------------------------------
mc <- mc %>% na.omit
pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start +
(change_by/(n_shift + 1)/2),
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
View(mc)
(change_by/(n_shift + 1)/2)
View(mc)
pl <- ggplot2::ggplot(data = mc) +
ggplot2::ggtitle(label = ecolind_name,
subtitle = paste0("% change per ", change_by," yrs")) +
ggplot2::theme_classic() +
ggplot2::theme(legend.position = "bottom") +
ggplot2::geom_col(
mapping = ggplot2::aes(x = previous_bin_start +
(change_by/2),
y = change_median,
fill = change_median > 0), alpha = 0.8) +
ggplot2::labs(x = age_scale, y = "Percentage change") +
ggplot2::scale_fill_manual(name = "",
values = c( "red", "green"),
labels = c("Decrease", "Increase")) +
ggplot2::geom_abline(mapping = ggplot2::aes(slope = 0, intercept = 0))
pl
View(mc)
pl <- pl +
ggplot2::geom_errorbar(
mapping = ggplot2::aes(x = previous_bin_start + change_by/2,
ymin = lower_25th,
ymax = upper_95th,
y = change_median))
pl
